{
  "ERR_CREDENTIALS_FILE_NOT_FOUND": "Credentials file not found",
  "ERR_CUSTOMER_SETUP_PATH_REQUIRED": "--customer-setup-path is required for unified installation",
  "ERR_CUSTOMER_SETUP_PATH_REQUIRED_TEARDOWN": "--customer-setup-path is required for unified teardown",
  "ERR_CUSTOMER_SETUP_PATH_REQUIRED_SETUP": "--customer-setup-path is required for setup",
  "ERR_MISSING_INSTALL_TYPE": "Missing INSTALL_TYPE",
  "ERR_MISSING_NS": "Missing NS",
  "ERR_MISSING_RELEASE_NAME": "Missing RELEASE_NAME",
  "ERR_MISSING_CHART_PATH": "Missing CHART_PATH",
  "ERR_MISSING_VALUES": "Missing VALUES",
  "ERR_DOCKER_LOGIN_FAILED": "Docker login failed",
  "ERR_DOCKER_USERNAME_NOT_FOUND": "DOCKER_USERNAME not found in environment",
  "ERR_DOCKER_PASSWORD_NOT_FOUND": "DOCKER_PASSWORD not found in environment",
  "LOG_CONFIG_DIRECTORY": ">> Config directory: {}",
  "LOG_INSTALLER_VALUES_DIRECTORY": ">> Installer values directory: {}",
  "LOG_TASK_COMPLETED": ">> Task completed successfully",
  "LOG_STARTING_UNIFIED_INSTALLATION": "Starting NebulaIQ unified installation for project: {}",
  "LOG_STARTING_UNIFIED_TEARDOWN": "Starting NebulaIQ unified teardown for project: {}",
  "LOG_STARTING_SETUP": "Starting NebulaIQ setup for project: {}",
  "LOG_INSTALLATION_COMPLETED": "NEBULAIQ INSTALLATION COMPLETED SUCCESSFULLY!",
  "LOG_TEARDOWN_COMPLETED": "NEBULAIQ TEARDOWN COMPLETED!",
  "LOG_SETUP_COMPLETED": "NEBULAIQ SETUP COMPLETED!",
  "LOG_STEP_COMPLETED": "Step {} completed successfully!",
  "LOG_WARNING_BASE_CONFIG_NOT_FOUND": "[WARNING] Base config({}) not found... proceeding without it",
  "LOG_WARNING_PROJECT_CONFIG_NOT_FOUND": "[WARNING] Project({}) config not found... proceeding without it",
  "LOG_WARNING_SETUP_SCRIPT_NOT_FOUND": "Warning: setup.sh not found for component {}",
  "LOG_WARNING_NIQ_SETUP_SCRIPT_NOT_FOUND": "Warning: new_niq-setup.sh not found for component {}",
  "LOG_WARNING_POST_INSTALL_SCRIPT_NOT_FOUND": "Warning: server/post-install.sh not found",
  "LOG_WARNING_STORAGE_CLASS_SCRIPT_NOT_FOUND": "Warning: storage class setup script not found",
  "DEBUG_CURRENT_DIRECTORY": "[debug] Marking current directory as config directory: {}",
  "DEBUG_READING_BASE_CONFIG": "[debug] Reading base config from {}",
  "DEBUG_READING_REMOTE_BASE_CONFIG": "[debug] Reading remote base config from {}",
  "DEBUG_READING_PROJECT_CONFIG": "[debug] Reading project config from {}",
  "DEBUG_READING_REMOTE_PROJECT_CONFIG": "[debug] Reading remote project config for {}",
  "DEBUG_RESULTING_CONFIG": "[debug] Resulting config: {:?}",
  "DEBUG_INSTALLER_FOUND": "[debug] Installer found in configuration: {:?}",
  "DEBUG_SETTING_UP_COMPONENT": "[debug] Setting up infrastructure component: {}",
  "DEBUG_INSTALLING_DEPENDENCY": "[debug] Installing dependency component: {}",
  "DEBUG_CREATING_RESOURCES": "[debug] Creating resources for component: {}",
  "DEBUG_INSTALLING_NIQ_COMPONENT": "[debug] Installing NIQ component: {}",
  "DEBUG_INSTALLING_AGENT_COMPONENT": "[debug] Installing agent component: {}",
  "DEBUG_UNINSTALLING_COMPONENT": "[debug] Uninstalling component: {}",
  "DEBUG_USING_DEFAULT_INSTALLER_VALUES_DIR": "[debug] Using default installer values directory: {}/install",
  "STEP_HEADER_INITIAL_SETUP": "STEP 1: INITIAL SETUP AND ENVIRONMENT LOADING",
  "STEP_HEADER_INFRASTRUCTURE": "STEP 2: SETUP INFRASTRUCTURE COMPONENTS",
  "STEP_HEADER_DEPENDENCIES": "STEP 3: INSTALL DEPENDENCIES",
  "STEP_HEADER_RESOURCES": "STEP 4: CREATE DEPENDENCY RESOURCES",
  "STEP_HEADER_NIQ_COMPONENTS": "STEP 5: INSTALL NIQ COMPONENTS",
  "CMD_TEMPLATE_HELM": "helm {}",
  "CMD_TEMPLATE_KUBECTL": "kubectl {}",
  "CMD_TEMPLATE_DOCKER": "docker {}",
  "CMD_TEMPLATE_NEBULAIQ_INSTALLER": "nebulaiq-installer {}",
  "SEPARATOR_LINE": "=================================================================="
} 